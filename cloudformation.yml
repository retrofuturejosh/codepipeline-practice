AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CodePipeline for Node Builds
Parameters:
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Github Token generated from
  GitHubRepoOwner:
    Type: String
    Description: Owner of the GitHub Repository
  GitHubRepoName:
    Type: String
    Description: Name of the GitHub Repository
  GitHubBranch:
    Type: String
    Description: Name of branch to use inside the GitHub Repository
    Default: master
  S3ArtifactStore:
    Type: String
    Description: S3 Bucket where artifacts will be stored
Resources:

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3ArtifactStore

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: CodePipelinePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - "s3:GetObject"
                    - "s3:GetObjectVersion"
                    - "s3:GetBucketVersioning"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "s3:PutObject"
                  Resource:
                    - "arn:aws:s3:::codepipeline*"
                    - "arn:aws:s3:::elasticbeanstalk*"
                -
                  Effect: Allow
                  Action:
                    - "codecommit:CancelUploadArchive"
                    - "codecommit:GetBranch"
                    - "codecommit:GetCommit"
                    - "codecommit:GetUploadArchiveStatus"
                    - "codecommit:UploadArchive"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "codedeploy:CreateDeployment"
                    - "codedeploy:GetApplicationRevision"
                    - "codedeploy:GetDeployment"
                    - "codedeploy:GetDeploymentConfig"
                    - "codedeploy:RegisterApplicationRevision"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "elasticbeanstalk:*"
                    - "ec2:*"
                    - "elasticloadbalancing:*"
                    - "autoscaling:*"
                    - "cloudwatch:*"
                    - "s3:*"
                    - "sns:*"
                    - "cloudformation:*"
                    - "rds:*"
                    - "sqs:*"
                    - "ecs:*"
                    - "iam:PassRole"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                    - "lambda:ListFunctions"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "opsworks:CreateDeployment"
                    - "opsworks:DescribeApps"
                    - "opsworks:DescribeCommands"
                    - "opsworks:DescribeDeployments"
                    - "opsworks:DescribeInstances"
                    - "opsworks:DescribeStacks"
                    - "opsworks:UpdateApp"
                    - "opsworks:UpdateStack"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "cloudformation:CreateStack"
                    - "cloudformation:DeleteStack"
                    - "cloudformation:DescribeStacks"
                    - "cloudformation:UpdateStack"
                    - "cloudformation:CreateChangeSet"
                    - "cloudformation:DeleteChangeSet"
                    - "cloudformation:DescribeChangeSet"
                    - "cloudformation:ExecuteChangeSet"
                    - "cloudformation:SetStackPolicy"
                    - "cloudformation:ValidateTemplate"
                    - "iam:PassRole"
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - "codebuild:BatchGetBuilds"
                    - "codebuild:StartBuild"
                  Resource: "*"

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
              -
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::codepipeline-*/*"
              -
                Effect: Allow
                Action:
                  - "ecr:CreateRepository"
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                Resource: "*"

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join [ "/", [ !Ref GitHubRepoOwner, !Ref GitHubRepoName ]]

  CodeBuildTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ "-", [ !Ref GitHubRepoName, "test" ]]
      Description: CodeBuild project for running Node tests
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Name: !Ref GitHubRepoName
        Type: CODEPIPELINE
        Packaging: NONE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - npm install
            pre_build:
              commands:
                - npm run lint
            build:
              commands:
                - npm run test > test.out
          artifacts:
            files:
              - test.out

      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/nodejs:6.3.1

  CodeBuildContainer:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ "-", [ !Ref GitHubRepoName, "container" ]]
      Description: CodeBuild Project for creating a Docker Container
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Name: !Ref GitHubRepoName
        Type: CODEPIPELINE
        Packaging: NONE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/docker:1.12.1
        EnvironmentVariables:
          -
            Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          -
            Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          -
            Name: IMAGE_REPO_NAME
            Value: !Join [ "/", [ !Ref GitHubRepoOwner, !Ref GitHubRepoName ]]
          -
            Name: IMAGE_TAG
            Value: latest


  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref GitHubRepoName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                -
                  Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubRepoOwner
                Repo: !Ref GitHubRepoName
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        -
          Name: Test
          Actions:
              -
                Name: RunTests
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                InputArtifacts:
                  -
                    Name: SourceOutput
                OutputArtifacts:
                  -
                    Name: TestOutput
                Configuration:
                  ProjectName: !Ref CodeBuildTest
                RunOrder: 1

        -
          Name: Build
          Actions:
              -
                Name: CreateContainer
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                InputArtifacts:
                  -
                    Name: SourceOutput
                OutputArtifacts:
                  -
                    Name: BuildOutput
                Configuration:
                  ProjectName: !Ref CodeBuildContainer
                RunOrder: 1
        -
          Name: Approval
          Actions:
            -
              Name: ApprovalAction
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
